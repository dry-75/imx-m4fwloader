/*********************************************************************
*               (c) SEGGER Microcontroller GmbH & Co. KG             *
*                        The Embedded Experts                        *
*                           www.segger.com                           *
**********************************************************************
*/

/*********************************************************************
   --- PLEASE do not remove this header ---

   This init script was modified by
      D.RY  [dry@embedded-synergy.co.za]

   The customized ResetTarget() should allow you to connect and start
   debugging on the iMX7D Cortex-M4, without first doing connect &
   initial M4 firmware upload on the Cortex-A7 side, as per howto.

   It also should allow you to do resets 0, 1 without resetting entire
   SoC when the aim is just M4 (and not A7 core(s) in particular).

   This was tested on the NXP iMX7D / SABRE board, Toradex's Colibri
   and Aster board + iMX7D, and Phytec's Zeta with iMX7D,
   using NXP's provided FreeRTOS demo apps.

   This thread were I first put it:
      https://community.nxp.com/thread/461296

   Now if updated I'll push it to:
      https://github.com/dry-75/imx-m4fwloader (under monitor/jlink).

   Last tested: 28.04.2020, JLink v670g
                No changes/updates to the script from Segger found
*********************************************************************/


/*********************************************************************
*
*       ResetTarget
*/
void ResetTarget(void) {
  // In case cores 1-3 are reset, we do nothing,
  //  as we would lose connection to these cores, when resetting the device
  //  as a reset disables the clock to them.

  //09.02.2018, D.RY:
  //Found a bug:  Segger's script parser does not understand (0== xxx), only
  //the other way around (at least in current soft version; but I can almost swear it worked before
  //( ...https://forum.segger.com/index.php?page=Thread&postID=17498&highlight=#post17498 ).

  //29.09.2017, D.RY:
  // For resets type 0 ,1, try do what Segger would in iMX7 way.

  //NOTE: When your code blob upload happens later (from GDB / IDE), the SP
  //PC will get set to proper addresses, using almost same commands as in
  //ResetType 0 below.

  Report(" ***** Custom ResetTarget called *****" );
  Report("" );

  if (MAIN_ResetType == 0){
    Report(" Performing customized ResetType 0 *** " );
    MEM_WriteU32(0x3039000C, 0xAC);
    MEM_WriteU32(0x00180000, 0); // 0x80000000);
    MEM_WriteU32(0x00180004, 0); // 0x80000004);
    MEM_WriteU32(0xE000EDFC, 0x01000001);
    MEM_WriteU32(0x3039000C, 0xAA);
  }
  else if (MAIN_ResetType == 1) {
    Report(" Performing customized ResetType 1 *** " );
    MEM_WriteU32(0xE000EDFC,  0x01000001);
    MEM_WriteU32(0x3039000C, 0xAA);
  }
  else {
    Report1(" WARNING: will NOT do any resets at all for ResetType = ", MAIN_ResetType);
  }
}

/*********************************************************************
*
*       InitTarget
*/
void InitTarget(void) {
  Report("*************************************************");
  Report("J-Link script: iMX7D Cortex-M4 core J-Link ES-DRY script");
  Report("*************************************************");
  JLINK_CORESIGHT_Configure("IRPre=0;DRPre=0;IRPost=0;DRPost=0;IRLenDevice=4");
  CPU = CORTEX_M4;                                                              // Pre-select that we have a Cortex-M4 connected
  JTAG_AllowTAPReset = 1;                                                       // J-Link is allowed to use a TAP reset for JTAG-chain auto-detection
  JTAG_SetDeviceId(0, 0x4BA00477);  // 4-bits IRLen
  CORESIGHT_AddAP(0, CORESIGHT_AHB_AP);
  CORESIGHT_AddAP(1, CORESIGHT_APB_AP);
  CORESIGHT_AddAP(2, CORESIGHT_CUSTOM_AP);
  CORESIGHT_AddAP(3, CORESIGHT_CUSTOM_AP);
  CORESIGHT_AddAP(4, CORESIGHT_AHB_AP);
  CORESIGHT_IndexAHBAPToUse = 4;
}
